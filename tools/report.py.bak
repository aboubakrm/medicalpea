#!/usr/bin/env python3
"""
Phase 4 â€” Conversation Visualizer (v5 - AI Studio Theme)
Usage:
  python tools/report.py results/latest_run.json
Emits: results/report_<run_id>.html
"""
import argparse
import json
import sys
import html
import re
from pathlib import Path
from datetime import datetime

# --- Data Extraction Utilities ---

def safe(s): return html.escape(str(s)) if s is not None else ""
def find_first(d, keys, default=None):
    for k in keys:
        cur = d; ks = k if isinstance(k,(list,tuple)) else [k]; ok = True
        for kk in ks:
            if isinstance(cur, dict) and kk in cur: cur = cur[kk]
            else: ok = False; break
        if ok: return cur
    return default

def guess_run_id(data, in_path: Path):
    rid = find_first(data, ["run_id", ["meta","run_id"], ["header","run_id"]])
    if rid: return str(rid)
    m = re.search(r"(?:run[_-]?)([\w\-]+)$", in_path.stem)
    return m.group(1) if m else in_path.stem

def extract_overall(data):
    overall_from_judge = find_first(data, [["overall", "weighted_score"]]);
    if overall_from_judge is not None:
        score = overall_from_judge
        label = find_first(data, [["overall", "final_verdict"]])
        return score, label
    score = find_first(data, ["overall_score"]); label = find_first(data, ["overall_label"])
    return score, (str(label).upper() if label else None)

def color_from_score(score, as_hex=False):
    try: s=float(score)
    except: return ("#9e9e9e", "grey") if as_hex else "grey"
    if s >= 0.8: return ("#81c995", "green") if as_hex else "green"
    if s >= 0.6: return ("#fdd663", "orange") if as_hex else "orange"
    return ("#f28b82", "red") if as_hex else "red"

def extract_domains(data):
    scores_dict = find_first(data, ["scores"])
    if scores_dict and all(isinstance(v, (int, float)) for v in scores_dict.values()):
        return {k: v for k, v in scores_dict.items()}
    return {}

def normalize_speaker(s, idx):
    if not s: return "REP"
    s_l = str(s).strip().lower(); rep_alias = {"rep","sales"}; hcp_alias = {"hcp","doctor"}
    if s_l in rep_alias or "rep" in s_l: return "REP"
    if s_l in hcp_alias or "doctor" in s_l: return "HCP"
    return "REP"

def extract_text(msg): return find_first(msg, ["text", "content", "message", "utterance", "prompt"], "")

def map_evidence_to_turns(turns, evidence):
    for turn in turns:
        turn['linked_evidence'] = []
    if not evidence or not turns:
        return turns
    for ev in evidence:
        quote = ev.get('quote', '').strip()
        domain = ev.get('domain', '').strip()
        if not quote or not domain:
            continue
        for turn in turns:
            if quote in turn.get('text', ''):
                turn['linked_evidence'].append(domain)
                break
    return turns

def extract_turns(data):
    arr = find_first(data, ["turns", "conversation", "messages"], [])
    turns = []
    if not arr:
        rep_input = find_first(data, ['rep_input', 'prompt']); hcp_response = find_first(data, ['hcp_response', 'response', 'hcp_ai_response'])
        if rep_input and hcp_response:
            turns = [{"turn": 1, "who": "REP", "text": rep_input}, {"turn": 2, "who": "HCP", "text": hcp_response}]
    else:
        for idx,msg in enumerate(arr):
            if not isinstance(msg,dict): continue
            speaker = find_first(msg, ["speaker", "role", "from"]); who = normalize_speaker(speaker, idx)
            turns.append({"turn": idx + 1, "who": who, "text": extract_text(msg)})
    
    evidence = find_first(data, ["evidence", ["judge", "evidence"]], [])
    return map_evidence_to_turns(turns, evidence)

def extract_coaching_notes(data):
    return find_first(data, ["notes", ["overall", "notes"], ["judge", "notes"]], "No specific coaching notes were provided by the judge.")

def css_block():
    return """
<style>
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Inter:wght@400;500;600;700;800&display=swap');
:root {
  --font-sans: "Inter", "Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
  --bg-color: #131314; --panel-color: #1e1f20; --border-color: #333537;
  --text-primary: #e3e3e3; --text-secondary: #9e9e9e; --text-tertiary: #757575;
  --accent-blue: #89b4fa;
  --accent-green: #81c995; --accent-orange: #fdd663; --accent-red: #f28b82;
}
* { box-sizing: border-box; }
@keyframes fadeIn { from { opacity: 0; transform: translateY(8px); } to { opacity: 1; transform: translateY(0); } }
body { margin: 0; font-family: var(--font-sans); background-color: var(--bg-color); color: var(--text-primary); animation: fadeIn 0.4s ease-out; }
.wrap { max-width: 800px; margin: 0 auto; padding: 40px 20px; }
.header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--border-color); padding-bottom: 16px; margin-bottom: 24px;}
.header-title { font-size: 16px; font-weight: 500; color: var(--text-secondary); }
.header-links a { color: var(--text-secondary); text-decoration: none; font-size: 13px; margin-left: 16px; font-weight: 500;}
.header-links a:hover { color: var(--accent-blue); }
.summary-panel { display: grid; grid-template-columns: 200px 1fr; gap: 40px; align-items: center; background-color: var(--panel-color); border: 1px solid var(--border-color); border-radius: 12px; padding: 32px; }
.score-gauge { position: relative; width: 150px; height: 150px; margin: 0 auto; }
.score-gauge svg { width: 100%; height: 100%; transform: rotate(-90deg); }
.score-gauge circle { fill: none; stroke-width: 14; }
.score-gauge .bg { stroke: var(--border-color); }
.score-gauge .progress { stroke-linecap: round; transition: stroke-dashoffset 0.8s cubic-bezier(0.25, 1, 0.5, 1); }
.score-value { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 42px; font-weight: 700; }
.score-label { position: absolute; top: 78%; left: 50%; transform: translateX(-50%); font-size: 14px; font-weight: 700; text-transform: uppercase; color: var(--text-secondary); letter-spacing: 0.05em; }
.domains { display: flex; flex-direction: column; gap: 16px; }
.domain-item { display: grid; grid-template-columns: 150px 1fr 50px; align-items: center; gap: 16px; }
.domain-name { font-weight: 500; font-size: 14px; color: var(--text-secondary); }
.domain-bar-bg { width: 100%; height: 8px; background-color: var(--border-color); border-radius: 4px; overflow: hidden; }
.domain-bar-fg { height: 100%; border-radius: 4px; transition: width 0.8s cubic-bezier(0.25, 1, 0.5, 1); }
.domain-score { font-size: 14px; font-weight: 700; text-align: right; }
.coaching-summary { margin-top: 32px; background-color: var(--panel-color); border: 1px solid var(--border-color); border-radius: 12px; padding: 24px; }
.coaching-title { display: flex; align-items: center; gap: 8px; font-size: 16px; font-weight: 600; color: var(--text-secondary); margin: 0 0 12px 0; }
.coaching-notes { font-size: 14px; line-height: 1.7; color: var(--text-primary); }
.conversation-timeline { margin-top: 40px; }
.turn { display: flex; gap: 16px; margin-bottom: 12px; }
.turn-hcp { justify-content: flex-end; }
.turn-hcp .message-content { order: -1; }
.avatar { width: 32px; height: 32px; border-radius: 50%; flex-shrink: 0; display: flex; align-items: center; justify-content: center; font-weight: 700; font-size: 14px; margin-top: 28px; }
.avatar-rep { background-color: #5f6368; } .avatar-hcp { background-color: var(--accent-blue); }
.message-content { width: 100%; min-width: 0; }
.message-header { display: flex; align-items: center; gap: 8px; margin-bottom: 6px; font-size: 13px; font-weight: 500; color: var(--text-secondary); }
.turn-hcp .message-header { justify-content: flex-end; }
.message-bubble { background-color: var(--panel-color); border: 1px solid var(--border-color); border-radius: 12px; padding: 14px 18px; position: relative; }
.message-text { white-space: pre-wrap; line-height: 1.7; font-size: 15px; overflow-wrap: break-word; word-break: break-word; }
.evidence-tags { margin-top: 10px; display: flex; flex-wrap: wrap; gap: 6px; }
.turn-hcp .evidence-tags { justify-content: flex-end; }
.evidence-tag { font-size: 11px; font-weight: 600; padding: 3px 8px; border-radius: 99px; text-transform: uppercase; border: 1px solid; }
.tag-green { border-color: rgba(129,201,149,0.3); background-color: rgba(129,201,149,0.1); color: var(--accent-green); }
.tag-orange { border-color: rgba(253,214,99,0.3); background-color: rgba(253,214,99,0.1); color: var(--accent-orange); }
.tag-red { border-color: rgba(242,139,130,0.3); background-color: rgba(242,139,130,0.1); color: var(--accent-red); }
.footer { margin-top: 40px; text-align: center; font-size: 12px; color: var(--text-tertiary); }
</style>
"""

def render_html(run_id, overall_score, overall_label, domains, turns, coaching_notes, json_link, csv_link):
    overall_val = float(overall_score or 0)
    color_hex, _ = color_from_score(overall_val, as_hex=True)
    gauge_circumference = 2 * 3.14159 * 43
    gauge_offset = gauge_circumference * (1 - overall_val)

    overall_gauge_html = f'''
    <div class="score-gauge">
        <svg viewBox="0 0 100 100">
            <circle class="bg" cx="50" cy="50" r="43"></circle>
            <circle class="progress" cx="50" cy="50" r="43" stroke="{color_hex}"
                    stroke-dasharray="{gauge_circumference}" stroke-dashoffset="{gauge_offset}"></circle>
        </svg>
        <div class="score-value" style="color: {color_hex};">{overall_val:.2f}</div>
        <div class="score-label">{safe(overall_label or "SCORE")}</div>
    </div>'''

    domain_html = []
    sorted_domains = sorted(domains.items())
    for name, score in sorted_domains:
        score_val = float(score or 0)
        bar_color_hex, _ = color_from_score(score_val, as_hex=True)
        domain_name_formatted = name.replace('_', ' ').title()
        domain_html.append(f'''
        <div class="domain-item">
            <div class="domain-name">{safe(domain_name_formatted)}</div>
            <div class="domain-bar-bg"><div class="domain-bar-fg" style="width: {score_val*100}%; background-color: {bar_color_hex};"></div></div>
            <div class="domain-score" style="color: {bar_color_hex};">{score_val:.2f}</div>
        </div>''')

    turn_html = []
    for t in turns:
        tag_html = ""
        if t.get('linked_evidence'):
            tags = []
            for domain_key in sorted(list(set(t['linked_evidence']))):
                score = domains.get(domain_key, 0)
                _, color_class = color_from_score(score)
                domain_name_formatted = domain_key.replace('_', ' ').title()
                tags.append(f'<span class="evidence-tag tag-{color_class}">{safe(domain_name_formatted)}</span>')
            tag_html = f'<div class="evidence-tags">{"".join(tags)}</div>'
        
        turn_html.append(f'''
        <div class="turn turn-{t["who"].lower()}">
            <div class="avatar avatar-{t["who"].lower()}">{safe(t["who"][0])}</div>
            <div class="message-content">
                <div class="message-header">{safe(t["who"])} â€¢ Turn #{t["turn"]}</div>
                <div class="message-bubble"><p class="message-text">{safe(t["text"])}</p></div>
                {tag_html}
            </div>
        </div>''')

    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    return f"""<!doctype html>
<html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>Conversation Report â€” {safe(run_id)}</title>{css_block()}
</head><body>
  <div class="wrap">
      <header class="header">
        <div class="header-title">Run ID: <strong>{safe(run_id)}</strong></div>
        <div class="header-links">
          <a href="{safe(json_link)}" target="_blank" rel="noopener">Raw JSON</a>
          <a href="{safe(csv_link)}" target="_blank" rel="noopener">Raw CSV</a>
        </div>
      </header>
      <main>
        <section class="summary-panel">
          {overall_gauge_html}
          <div class="domains">{''.join(domain_html)}</div>
        </section>
        <section class="coaching-summary">
          <h2 class="coaching-title">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16"><path d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/><path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.055.352.176.288.469l-.738 3.468c-.064.293.006.399.287.47l.45.082.082-.38-2.29-.287a.5.5 0 0 1-.45-.492l.738-3.468a.5.5 0 0 1 .492-.45l2.29.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/></svg>
            Coaching Summary
          </h2>
          <p class="coaching-notes">{safe(coaching_notes)}</p>
        </section>
        <section class="conversation-timeline">
          {''.join(turn_html) if turns else '<p style="color:var(--text-secondary); text-align:center; padding: 40px 0;">No conversation turns found.</p>'}
        </section>
      </main>
      <footer class="footer">Generated on {safe(now)}</footer>
  </div>
</body></html>"""

def main():
    ap = argparse.ArgumentParser(description="Generate a professional, AI Studio-themed HTML conversation report from a JSON file.")
    ap.add_argument("json_path", help="Path to the input JSON file.")
    ap.add_argument("--out", help="Optional path for the output HTML file. Defaults to results/report_<run_id>.html.")
    a = ap.parse_args()

    in_path = Path(a.json_path)
    if not in_path.exists(): print(f"[Error] Input not found: {in_path}", file=sys.stderr); sys.exit(1)
    try: data = json.loads(in_path.read_text(encoding="utf-8"))
    except json.JSONDecodeError as e: print(f"[Error] Failed to parse JSON: {e}", file=sys.stderr); sys.exit(1)

    run_id = guess_run_id(data, in_path)
    overall_score, overall_label = extract_overall(data)
    domains = extract_domains(data)
    turns = extract_turns(data)
    coaching_notes = extract_coaching_notes(data)

    out_path = Path(a.out) if a.out else Path("results") / f"report_{run_id}.html"
    out_path.parent.mkdir(parents=True, exist_ok=True)
    html_str = render_html(run_id, overall_score, overall_label, domains, turns, coaching_notes, in_path.name, f"summary_{run_id}.csv")
    out_path.write_text(html_str, encoding="utf-8")
    print(f"AI Studio-themed report generated successfully: {out_path.resolve()}")

if __name__ == "__main__":
    main()
